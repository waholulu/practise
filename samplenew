# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from catboost import CatBoostClassifier
from sklearn.metrics import f1_score, make_scorer, roc_auc_score
from imblearn.over_sampling import RandomOverSampler, SMOTE
from google.cloud import bigquery
import warnings

# Ignore warnings to keep the output clean
warnings.filterwarnings('ignore')

# Define custom scoring functions (as before)
# ...

# Create dictionary of scorers (as before)
# ...

# Initialize a BigQuery client
client = bigquery.Client()

# Fetch data from BigQuery (as before)
# ...

# Prepare features (X) and target (y) for model training
X = df.drop(columns=["ip6"]).astype(int)
y = df["ip6"].astype(int)

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)

# Initialize the CatBoost classifier
model = CatBoostClassifier(verbose=False)

# Different oversampling techniques
oversamplers = {
    'random': RandomOverSampler,
    'smote': SMOTE
}

# Different ratios for oversampling
ratios = [0.25, 0.5, 0.75, 1.0]  # Corresponds to ratios 1:3, 1:2, 1:1.33, 1:1

# Store results
results = []

for oversampler_name, Oversampler in oversamplers.items():
    for ratio in ratios:
        # Apply oversampling
        oversampler = Oversampler(sampling_strategy=ratio, random_state=42)
        X_res, y_res = oversampler.fit_resample(X_train, y_train)
        
        # Train the model
        model.fit(X_res, y_res)
        
        # Evaluate the model on the test set
        y_pred = model.predict(X_test)
        y_pred_proba = model.predict_proba(X_test)[:, 1]
        
        # Calculate all the scorers
        scores = {name: scorer._score_func(y_test, y_pred_proba) for name, scorer in scorers.items()}
        
        # Save results
        result = {
            'Oversampler': oversampler_name,
            'Ratio': ratio,
            **scores
        }
        results.append(result)

# Convert results to a Pandas DataFrame and print it
results_df = pd.DataFrame(results)
print(results_df)
