def custom_model(input_data):
    # Initialize an empty list to store the results
    results = []

    # Iterate over each sample in the input data
    for sample in input_data:
        # Unpack the variables from the current sample
        X1, X2, X3, X4, X5 = sample

        # Compute the output based on the value of X1
        if X1 == 1:
            Y = 5 * X2 + 2 * X3 + X4
        else:  # Assuming X1 can only be 0 or 1
            Y = 3 * X2 + X3 + 0.5 * X5

        # Append the result to the results list
        results.append(Y)

    return np.array(results)



import shap
import numpy as np

# Generate example data for explanation (10 samples, 5 features each)
# X1 is a dummy variable (0 or 1), X2 to X5 are uniform random numbers between 0 and 1
data_for_explanation = np.random.rand(10, 5)
data_for_explanation[:, 0] = np.random.randint(0, 2, size=10)  # Setting X1 as 0 or 1

# Create a SHAP explainer object
explainer = shap.KernelExplainer(custom_model, data_for_explanation)

# New data to explain (single sample)
new_data_to_explain = np.random.rand(1, 5)
new_data_to_explain[0, 0] = np.random.randint(0, 2)  # Setting X1 as 0 or 1

# Compute SHAP values
shap_values = explainer.shap_values(new_data_to_explain)

# Print SHAP values
print(shap_values)
