# Import necessary libraries
from imblearn.over_sampling import RandomOverSampler
from imblearn.under_sampling import RandomUnderSampler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import pandas as pd

# ... (previous code for imports, custom scoring functions, and data loading)

# Split the dataset into a training set and a test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)

# Define the ratios for balancing the dataset
ratios = [1/3, 1/10, 1/20, 1/30]

# Initialize a results dictionary to save the evaluation metrics
results = {
    "Method": [],
    "Ratio": [],
    "lift@1%": [],
    "f1@1%": [],
    "true_positives@1%": [],
    "num_samples@1%": [],
    "AUC": [],
    "Weighted AUC": []
}

# Define a function to evaluate the model
def evaluate_model(model, X_train, y_train, X_test, y_test):
    model.fit(X_train, y_train)
    y_pred_proba = model.predict_proba(X_test)[:, 1]
    results = {
        "lift@1%": lift_at_1_percent(y_test, y_pred_proba),
        "f1@1%": f1_score_top_1_percent(y_test, y_pred_proba),
        "true_positives@1%": true_positives_at_1_percent(y_test, y_pred_proba),
        "num_samples@1%": num_samples_at_1_percent(y_test, y_pred_proba),
        "AUC": roc_auc_score(y_test, y_pred_proba),
        "Weighted AUC": roc_auc_score(y_test, y_pred_proba, average="weighted")
    }
    return results

# Iterate over the different ratios
for ratio in ratios:
    # Upsampling the minority class
    ros = RandomOverSampler(sampling_strategy=ratio, random_state=42)
    X_resampled, y_resampled = ros.fit_resample(X_train, y_train)
    model = CatBoostClassifier(verbose=False)
    metrics = evaluate_model(model, X_resampled, y_resampled, X_test, y_test)
    results["Method"].append("Upsampling")
    results["Ratio"].append(ratio)
    for metric, value in metrics.items():
        results[metric].append(value)

    # Downsampling the majority class
    rus = RandomUnderSampler(sampling_strategy=ratio, random_state=42)
    X_resampled, y_resampled = rus.fit_resample(X_train, y_train)
    model = CatBoostClassifier(verbose=False)
    metrics = evaluate_model(model, X_resampled, y_resampled, X_test, y_test)
    results["Method"].append("Downsampling")
    results["Ratio"].append(ratio)
    for metric, value in metrics.items():
        results[metric].append(value)

# Convert the results to a DataFrame and save to a CSV file
results_df = pd.DataFrame(results)
results_df.to_csv("balancing_results.csv", index=False)

# Print the results for review
print(results_df)
